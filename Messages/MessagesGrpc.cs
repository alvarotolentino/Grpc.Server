// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Grpctest.Messages {
  public static partial class UserService
  {
    static readonly string __ServiceName = "UserService";

    static readonly grpc::Marshaller<global::Grpctest.Messages.GetByUserIdRequest> __Marshaller_GetByUserIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.GetByUserIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.Messages.UserResponse> __Marshaller_UserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.UserResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.Messages.GetAllRequest> __Marshaller_GetAllRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.GetAllRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.Messages.UserRequest> __Marshaller_UserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.UserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.Messages.AddImageRequest> __Marshaller_AddImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.AddImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpctest.Messages.AddImageResponse> __Marshaller_AddImageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpctest.Messages.AddImageResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpctest.Messages.GetByUserIdRequest, global::Grpctest.Messages.UserResponse> __Method_GetByUserId = new grpc::Method<global::Grpctest.Messages.GetByUserIdRequest, global::Grpctest.Messages.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetByUserId",
        __Marshaller_GetByUserIdRequest,
        __Marshaller_UserResponse);

    static readonly grpc::Method<global::Grpctest.Messages.GetAllRequest, global::Grpctest.Messages.UserResponse> __Method_GetAll = new grpc::Method<global::Grpctest.Messages.GetAllRequest, global::Grpctest.Messages.UserResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAll",
        __Marshaller_GetAllRequest,
        __Marshaller_UserResponse);

    static readonly grpc::Method<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse> __Method_Save = new grpc::Method<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Save",
        __Marshaller_UserRequest,
        __Marshaller_UserResponse);

    static readonly grpc::Method<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse> __Method_SaveAll = new grpc::Method<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SaveAll",
        __Marshaller_UserRequest,
        __Marshaller_UserResponse);

    static readonly grpc::Method<global::Grpctest.Messages.AddImageRequest, global::Grpctest.Messages.AddImageResponse> __Method_AddImage = new grpc::Method<global::Grpctest.Messages.AddImageRequest, global::Grpctest.Messages.AddImageResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddImage",
        __Marshaller_AddImageRequest,
        __Marshaller_AddImageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpctest.Messages.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Grpctest.Messages.UserResponse> GetByUserId(global::Grpctest.Messages.GetByUserIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetAll(global::Grpctest.Messages.GetAllRequest request, grpc::IServerStreamWriter<global::Grpctest.Messages.UserResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpctest.Messages.UserResponse> Save(global::Grpctest.Messages.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SaveAll(grpc::IAsyncStreamReader<global::Grpctest.Messages.UserRequest> requestStream, grpc::IServerStreamWriter<global::Grpctest.Messages.UserResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpctest.Messages.AddImageResponse> AddImage(grpc::IAsyncStreamReader<global::Grpctest.Messages.AddImageRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Grpctest.Messages.UserResponse GetByUserId(global::Grpctest.Messages.GetByUserIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByUserId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpctest.Messages.UserResponse GetByUserId(global::Grpctest.Messages.GetByUserIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetByUserId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpctest.Messages.UserResponse> GetByUserIdAsync(global::Grpctest.Messages.GetByUserIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByUserIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpctest.Messages.UserResponse> GetByUserIdAsync(global::Grpctest.Messages.GetByUserIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetByUserId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpctest.Messages.UserResponse> GetAll(global::Grpctest.Messages.GetAllRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAll(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Grpctest.Messages.UserResponse> GetAll(global::Grpctest.Messages.GetAllRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAll, null, options, request);
      }
      public virtual global::Grpctest.Messages.UserResponse Save(global::Grpctest.Messages.UserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Save(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpctest.Messages.UserResponse Save(global::Grpctest.Messages.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Save, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpctest.Messages.UserResponse> SaveAsync(global::Grpctest.Messages.UserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpctest.Messages.UserResponse> SaveAsync(global::Grpctest.Messages.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Save, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse> SaveAll(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveAll(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Grpctest.Messages.UserRequest, global::Grpctest.Messages.UserResponse> SaveAll(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SaveAll, null, options);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Grpctest.Messages.AddImageRequest, global::Grpctest.Messages.AddImageResponse> AddImage(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddImage(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Grpctest.Messages.AddImageRequest, global::Grpctest.Messages.AddImageResponse> AddImage(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddImage, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetByUserId, serviceImpl.GetByUserId)
          .AddMethod(__Method_GetAll, serviceImpl.GetAll)
          .AddMethod(__Method_Save, serviceImpl.Save)
          .AddMethod(__Method_SaveAll, serviceImpl.SaveAll)
          .AddMethod(__Method_AddImage, serviceImpl.AddImage).Build();
    }

  }
}
#endregion
